<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.${templateInfo.companyName}.${templateInfo.projectName}.dao.${tableModel.domainName}Dao">
    <!-- DemoTest的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_${tableModel.domainName}_Map" type="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}">
        <#list tableModel.columnList as columnModel>
			<id column="${columnModel.dBcolumnName}" property="${columnModel.columnName}" />
    	</#list>
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${r'${req.require}'}表示列名,${r'#{req.value}'}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${r'${req.require}'} 
                <if test="req.value != null"> ${r'#{req.value}'}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                         ${r'#{val}'}
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${r'${req.suffix}'}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${r'${req.require}'}表示列名,${r'#{req.value}'}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${r'${req.require}'}
                <if test="req.value != null"> ${r'#{req.value}'}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        ${r'#{val} '}
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${r'${req.suffix}'}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:${tableModel.domainName}的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="${tableModel.domainName}_Column">
    	<#list tableModel.columnList as columnModel>
    		 <#if columnModel_index == 0>
    		 ${tableModel.tableName}.${columnModel.dBcolumnName} as ${columnModel.dBcolumnName}
    		 </#if>
    		 <#if columnModel_index != 0>
    		 ,${tableModel.tableName}.${columnModel.dBcolumnName} as ${columnModel.dBcolumnName}
    		 </#if>
    	</#list>
    </sql>

    <!--获得类名为:${tableModel.domainName}对应的数据库表的数据总行数 -->
    <select id="getObjRowCountCommon" parameterType="com.cimr.util.Assist" resultType="java.lang.Long">
        select count(id) from ${tableModel.tableName}
        <if test="require!=null"><include refid="Assist" /></if>
    </select>

    <!-- 通用列表查询-->
    <select id="selectListCommon" parameterType="com.cimr.util.Assist" resultMap="result_${tableModel.domainName}_Map">
        SELECT <include refid="${tableModel.domainName}_Column" /> FROM ${tableModel.tableName}
        <if test="require!=null"><include refid="Assist" /></if>
        <choose>
            <when test="order !=null">
                ${r'${order}'}
            </when>
            <otherwise>
                order by create_time DESC
            </otherwise>
        </choose>
        <if test="startRow !=null and rowSize !=null">
            LIMIT  ${r'#{startRow}'},${r'#{rowSize}'}
        </if>
    </select>


    <!-- 获得一个${tableModel.domainName}对象,以参数DemoTest对象中不为空的属性作为条件进行查询-->
    <select id="selectObjByObjCommon" parameterType="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}" resultMap="result_${tableModel.domainName}_Map">
        select 
            <include refid="${tableModel.domainName}_Column" /> 
        from ${tableModel.tableName}
        <where>
        	<#list tableModel.columnList as columnModel>
        		 <if test="${columnModel.columnName} != null "> and ${tableModel.tableName}.${columnModel.dBcolumnName} = ${r'#{'}${columnModel.columnName}}</if>
        	 </#list>
        </where>
    </select> 

    <!-- 通过${tableModel.domainName}的id获得对应数据库中表的数据对象-->
    <select id="selectObjByIdCommon" parameterType="java.lang.String" resultMap="result_${tableModel.domainName}_Map">
        select 
            <include refid="${tableModel.domainName}_Column" /> 
        from ${tableModel.tableName}
        where ${tableModel.tableName}.id = ${r'#{id}'}
    </select> 

    <!-- 将${tableModel.domainName}插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertObjCommon" parameterType="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}">
        insert into ${tableModel.tableName}(<#list tableModel.columnList as columnModel><#if !columnModel_has_next>${columnModel.dBcolumnName}</#if><#if columnModel_has_next>${columnModel.dBcolumnName},</#if></#list>) 
        values(<#list tableModel.columnList as columnModel><#if !columnModel_has_next>${r'#{'}${columnModel.columnName}}</#if><#if columnModel_has_next>${r'#{'}${columnModel.columnName}},</#if></#list>)
    </insert>

    <!-- 将${tableModel.domainName}中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyObjCommon" parameterType="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}">
        insert into ${tableModel.tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
        	<#list tableModel.columnList as columnModel>
        		 <if test="${columnModel.columnName}  != null">${columnModel.dBcolumnName},</if>
        	 </#list>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
        	<#list tableModel.columnList as columnModel>
        		 <if test="${columnModel.columnName} != null"> ${r'#{'}${columnModel.columnName}},</if>
        	 </#list>
        </trim>
    </insert>

    <!-- 将${tableModel.domainName}批量插入到对应数据库的表中-->
    <insert id="insertObjByBatchCommon" parameterType="ArrayList">
        insert into ${tableModel.tableName}(<#list tableModel.columnList as columnModel><#if !columnModel_has_next>${columnModel.dBcolumnName}</#if><#if columnModel_has_next>${columnModel.dBcolumnName},</#if></#list>) values
        <foreach collection="list" item="item" index="index" separator="," >
            (<#list tableModel.columnList as columnModel><#if !columnModel_has_next>${r'#{'}item.${columnModel.columnName}}</#if><#if columnModel_has_next>${r'#{'}item.${columnModel.columnName}},</#if></#list>)
        </foreach>
    </insert>

    <!-- 通过${tableModel.domainName}的id将数据库表中对应的数据删除-->
    <delete id="deleteObjByIdCommon" parameterType="java.lang.String">
        delete from ${tableModel.tableName}
        where id = ${r'#{id}'}
    </delete>

    <!-- 通过辅助工具Assist中的条件将${tableModel.domainName}对应的数据库表的数据删除-->
    <delete id="deleteObjCommon" parameterType="com.cimr.util.Assist">
        delete from ${tableModel.tableName}
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过${tableModel.domainName}的id将${tableModel.domainName}的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateObjByIdCommon" parameterType="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}">
        update ${tableModel.tableName} set
        	<#list tableModel.columnList as columnModel>
        		<#if columnModel_index == 0></#if>
        		<#if columnModel_index == 1> ${columnModel.dBcolumnName}=${r'#{'}${columnModel.columnName}}</#if>
        		<#if columnModel_index != 1 && columnModel_index != 0> ,${columnModel.dBcolumnName}=${r'#{'}${columnModel.columnName}}</#if>
        		</#list>
        where id=${r'#{id}'}
    </update>

    <!-- 通过${tableModel.domainName}的id将${tableModel.domainName}中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyObjByIdCommon" parameterType="com.${templateInfo.companyName}.${templateInfo.projectName}.model.${tableModel.domainName}">
        update ${tableModel.tableName}
        <set>
        	<#list tableModel.columnList as columnModel>
        		 <#if columnModel_index == 0></#if>
        		 <#if columnModel_index != 0>
        		 <if test="${columnModel.columnName}  != null">
	                ${columnModel.dBcolumnName}=${r'#{'}${columnModel.columnName}},
	             </if>
        		 </#if>
        	 </#list>
        </set>
        where id=${r'#{id}'}
    </update>

    <!-- 通过辅助工具Assist中的条件将${tableModel.domainName}中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateObjCommon" parameterType="map">
        update ${tableModel.tableName}
        <set>
        		<#list tableModel.columnList as columnModel>
        			 ${columnModel.dBcolumnName}=${r'#{'}${columnModel.columnName}},
	        	 </#list>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将${tableModel.domainName}中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyObjCommon" parameterType="map">
        update ${tableModel.tableName}
        <set>
        	<#list tableModel.columnList as columnModel>
        		<#if columnModel_index == 0></#if>
        		<#if columnModel_index != 0></#if>
	        	 <if test="enti.${columnModel.columnName} != null">
	                ${columnModel.dBcolumnName}=${r'#{'}enti.${columnModel.columnName}},
	            </if>
	        </#list>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>


</mapper>